function bubbleSort(arr) {
  for (let i = 0; i < arr.length; i++) {              // Passagens
    for (let j = 0; j < arr.length - i - 1; j++) {    // ComparaÃ§Ãµes
      if (arr[j] > arr[j + 1]) {                      // Se fora de ordem
        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];  // Troca usando destructuring
      }
    }
  }
  return arr;
}
// Linha por linha:
// for (let i = 0; i < arr.length; i++)
// â†’ Controla quantas vezes o array serÃ¡ percorrido.
// (Cada passada posiciona o prÃ³ximo maior nÃºmero no final).

// for (let j = 0; j < arr.length - i - 1; j++)
// â†’ Faz as comparaÃ§Ãµes entre os pares.
// â†’ O - i - 1 impede comparaÃ§Ãµes com os elementos que jÃ¡ estÃ£o no lugar certo.

// if (arr[j] > arr[j + 1])
// â†’ Verifica se o par estÃ¡ fora de ordem (maior vem antes do menor).

// [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]
// â†’ Troca os valores de posiÃ§Ã£o (tÃ©cnica moderna usando destructuring assignment).

// return arr
// â†’ Retorna o array ordenado.

// ğŸ§© 1. OrdenaÃ§Ã£o crescente simples

// Crie uma funÃ§Ã£o que utilize Bubble Sort para ordenar o array abaixo em ordem crescente e exiba o resultado no console.

const numeros = [9, 3, 5, 1, 8, 2];


// ğŸ“Œ Objetivo: entender o funcionamento bÃ¡sico do algoritmo.
// ğŸ’¡ Dica: copie a estrutura bÃ¡sica do bubble sort e aplique.

// ğŸ§© 2. OrdenaÃ§Ã£o decrescente

// Utilizando o mesmo algoritmo Bubble Sort, agora ordene o array abaixo em ordem decrescente.

const numeros1 = [4, 10, 1, 6, 2, 9];


// ğŸ“Œ Objetivo: inverter a condiÃ§Ã£o de comparaÃ§Ã£o (> â†’ <).
// ğŸ’¡ Dica: sÃ³ muda o sinal dentro do if.

// ğŸ§© 3. Ordenar nomes em ordem alfabÃ©tica

// Usando Bubble Sort, ordene os nomes abaixo em ordem alfabÃ©tica (A â†’ Z).

const nomes = ["Carlos", "Ana", "Beatriz", "JoÃ£o", "Eduardo"];


// ğŸ“Œ Objetivo: aplicar comparaÃ§Ã£o entre strings (> e < funcionam para comparar textos).
// ğŸ’¡ Dica: teste tambÃ©m nomes com letras minÃºsculas e maiÃºsculas â€” o comportamento muda.

// ğŸ§© 4. Ordenar objetos por preÃ§o

// Dado o array de objetos, ordene pelo preÃ§o (preco) do menor para o maior, usando Bubble Sort.

const produtos = [
  { nome: "Teclado", preco: 100 },
  { nome: "Monitor", preco: 900 },
  { nome: "Mouse", preco: 50 },
  { nome: "Cadeira", preco: 350 }
];


// ğŸ“Œ Objetivo: praticar comparaÃ§Ã£o de propriedades dentro de objetos.
// ğŸ’¡ Dica: use if (arr[j].preco > arr[j + 1].preco).

// ğŸ§© 5. Bubble Sort otimizado

// Implemente o Bubble Sort otimizado (com a verificaÃ§Ã£o de trocas) e teste com este array:

const numeros3 = [1, 2, 3, 4, 5];


// ğŸ“Œ Objetivo: fazer com que o algoritmo detecte que o array jÃ¡ estÃ¡ ordenado e interrompa o loop antecipadamente.
// ğŸ’¡ Dica: use uma variÃ¡vel booleana trocou para marcar se houve troca.